// app.js
// üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø FIREBASE
const firebaseConfig = {
  apiKey: "AIzaSyCB_bwtspz0GuQeialypinwih1VQ1E30wo",
  authDomain: "my-schedule-b323f.firebaseapp.com",
  projectId: "my-schedule-b323f",
  storageBucket: "my-schedule-b323f.firebasestorage.app",
  messagingSenderId: "2949606491",
  appId: "1:2949606491:web:2a0f37da954c0d1267237e"
};

// üîê –ü–ê–†–û–õ–ò –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø (sha256 —Ö–µ—à)
const TANYA_PASSWORD_HASH = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92"; // –ü–∞—Ä–æ–ª—å:
const DIMA_PASSWORD_HASH = "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92"; // –ü–∞—Ä–æ–ª—å:

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
let db = null;
try {
    if (firebaseConfig.apiKey && firebaseConfig.projectId) {
        firebase.initializeApp(firebaseConfig);
        db = firebase.firestore();
        console.log('‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Firebase:', error);
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentMonth = new Date();
let isEditMode = false;
let userRole = null; // 'tanya' –∏–ª–∏ 'dima'
let selectedDay = null;
let scheduleData = {};
let notesData = {};
const monthNames = [
    "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
    "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
];

// –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
const endTimeOptions = {
    // –ü–Ω-–ß—Ç
    1: ["16:30", "18:00", "21:00"],
    2: ["16:30", "18:00", "21:00"],
    3: ["16:30", "18:00", "21:00"],
    4: ["16:30", "18:00", "21:00"],
    // –ü—Ç
    5: ["15:15", "16:45", "21:00"],
    // –°–±-–í—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    0: ["16:30", "18:00", "21:00"],
    6: ["16:30", "18:00", "21:00"]
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

async function initializeApp() {
    await loadData();
    setupEventListeners();
    renderCalendar();
    updateStats();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
async function loadData() {
    if (db) {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            const scheduleSnapshot = await db.collection('schedule').get();
            scheduleData = {};
            scheduleSnapshot.forEach(doc => {
                scheduleData[doc.id] = doc.data();
            });

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–º–µ—Ç–∫–∏
            const notesSnapshot = await db.collection('notes').get();
            notesData = {};
            notesSnapshot.forEach(doc => {
                const data = doc.data();
                if (!notesData[data.date]) notesData[data.date] = [];
                notesData[data.date].push(data);
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    document.getElementById('prev-month').addEventListener('click', () => {
        currentMonth.setMonth(currentMonth.getMonth() - 1);
        renderCalendar();
        updateStats();
    });

    document.getElementById('next-month').addEventListener('click', () => {
        currentMonth.setMonth(currentMonth.getMonth() + 1);
        renderCalendar();
        updateStats();
    });

    document.getElementById('current-month').addEventListener('click', () => {
        currentMonth = new Date();
        renderCalendar();
        updateStats();
    });

    // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö
    document.getElementById('edit-toggle').addEventListener('click', function() {
        if (isEditMode) {
            // –ï—Å–ª–∏ —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ–≥–æ
            exitEditMode();
        } else {
            // –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            showAuthModal();
        }
    });

    // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    document.getElementById('save-changes').addEventListener('click', exitEditMode);

    // –§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    document.getElementById('auth-form').addEventListener('submit', handleAuth);

    // –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
    document.getElementById('add-note-form').addEventListener('submit', handleAddNote);
}

// –†–µ–Ω–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è
function renderCalendar() {
    const calendar = document.getElementById('monthCalendar');
    calendar.innerHTML = '';

    const year = currentMonth.getFullYear();
    const month = currentMonth.getMonth();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    document.getElementById('month-range').textContent = `${monthNames[month]} ${year}`;

    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    
    let firstDayOfWeek = firstDay.getDay();
    firstDayOfWeek = firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1;
    
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    // –î–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    for (let i = firstDayOfWeek - 1; i >= 0; i--) {
        const prevMonthDay = new Date(year, month, -i);
        createDayElement(prevMonthDay, true);
    }

    // –î–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    for (let day = 1; day <= lastDay.getDate(); day++) {
        const currentDay = new Date(year, month, day);
        createDayElement(currentDay, false);
    }

    // –î–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    const totalCells = 42;
    const existingCells = firstDayOfWeek + lastDay.getDate();
    for (let i = 1; i <= totalCells - existingCells; i++) {
        const nextMonthDay = new Date(year, month + 1, i);
        createDayElement(nextMonthDay, true);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–Ω—è
function createDayElement(date, isOtherMonth) {
    const dayElement = document.createElement('div');
    dayElement.className = 'month-day';
    
    const dayKey = date.toISOString().split('T')[0];
    const dayOfWeek = date.getDay();
    const isWeekend = dayOfWeek === 0 || dayOfWeek === 6;
    const isWorkDay = scheduleData[dayKey]?.isWorkDay || false;
    const workTimeStart = scheduleData[dayKey]?.timeStart || '';
    const workTimeEnd = scheduleData[dayKey]?.timeEnd || '';
    const hasNotes = notesData[dayKey] && notesData[dayKey].length > 0;
    const hasWorkTime = workTimeStart && workTimeStart !== '';
    
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const isToday = date.getTime() === today.getTime();

    if (isOtherMonth) dayElement.classList.add('other-month');
    if (isWeekend) dayElement.classList.add('weekend');
    if (isToday) dayElement.classList.add('today');
    if (isWorkDay) dayElement.classList.add('work-day');
    if (hasNotes) dayElement.classList.add('has-notes');
    if (hasWorkTime) dayElement.classList.add('has-work-time');

    // –ù–æ–º–µ—Ä –¥–Ω—è
    const dayNumber = document.createElement('div');
    dayNumber.className = 'month-day-number';
    dayNumber.textContent = date.getDate();
    dayElement.appendChild(dayNumber);

    // –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (hasWorkTime) {
        const timeElement = document.createElement('div');
        timeElement.className = 'month-day-time';
        timeElement.textContent = `${workTimeStart}-${workTimeEnd}`;
        dayElement.appendChild(timeElement);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤
    if (!isOtherMonth) {
        dayElement.addEventListener('click', () => handleDayClick(date, dayKey, isWorkDay));
    }

    document.getElementById('monthCalendar').appendChild(dayElement);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –¥–Ω—é
function handleDayClick(date, dayKey, isWorkDay) {
    if (isEditMode) {
        // –í —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        selectedDay = { date, dayKey, isWorkDay };
        
        if (userRole === 'tanya') {
            // –¢–∞–Ω—è - –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—á–∞–µ—Ç —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –±–µ–∑ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
            toggleWorkDay();
        } else if (userRole === 'dima') {
            // –î–∏–º–∞ - –≤—ã–±–∏—Ä–∞–µ—Ç –≤—Ä–µ–º—è
            showTimeModal();
        }
    } else {
        // –í —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - –ø–æ–∫–∞–∑ –∑–∞–º–µ—Ç–æ–∫
        selectedDay = { date, dayKey, isWorkDay };
        showNotesModal();
    }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è (–¥–ª—è –¢–∞–Ω–∏)
async function toggleWorkDay() {
    const wasWorkDay = scheduleData[selectedDay.dayKey]?.isWorkDay || false;
    const newWorkDayState = !wasWorkDay;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
    const existingTimeStart = scheduleData[selectedDay.dayKey]?.timeStart || '';
    const existingTimeEnd = scheduleData[selectedDay.dayKey]?.timeEnd || '';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
    scheduleData[selectedDay.dayKey] = {
        isWorkDay: newWorkDayState,
        timeStart: existingTimeStart, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
        timeEnd: existingTimeEnd      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
    if (db) {
        try {
            await db.collection('schedule').doc(selectedDay.dayKey).set({
                isWorkDay: newWorkDayState,
                timeStart: existingTimeStart, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
                timeEnd: existingTimeEnd,     // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
                date: selectedDay.dayKey
            }, { merge: true });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        }
    }
    
    renderCalendar();
    updateStats();
}

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
function showTimeModal() {
    const modal = document.getElementById('time-modal');
    const title = document.getElementById('time-modal-title');
    const timeStartSelect = document.getElementById('work-time-start');
    const timeEndSelect = document.getElementById('work-time-end');
    
    const dateStr = selectedDay.date.toLocaleDateString('ru-RU');
    title.textContent = `–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–∞ ${dateStr}`;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –µ—Å–ª–∏ –µ—Å—Ç—å
    if (scheduleData[selectedDay.dayKey]?.timeStart) {
        timeStartSelect.value = scheduleData[selectedDay.dayKey].timeStart;
    } else {
        timeStartSelect.value = '09:00'; // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    const dayOfWeek = selectedDay.date.getDay();
    const endTimes = endTimeOptions[dayOfWeek] || endTimeOptions[1]; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ü–Ω-–ß—Ç
    
    timeEndSelect.innerHTML = '';
    endTimes.forEach(time => {
        const option = document.createElement('option');
        option.value = time;
        option.textContent = time;
        timeEndSelect.appendChild(option);
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
    if (scheduleData[selectedDay.dayKey]?.timeEnd) {
        timeEndSelect.value = scheduleData[selectedDay.dayKey].timeEnd;
    } else {
        timeEndSelect.value = endTimes[0]; // –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
    
    modal.style.display = 'flex';
}

function closeTimeModal() {
    document.getElementById('time-modal').style.display = 'none';
}

function showNotesModal() {
    const modal = document.getElementById('notes-modal');
    const title = document.getElementById('notes-modal-title');
    const notesList = document.getElementById('notes-list');
    
    const dateStr = selectedDay.date.toLocaleDateString('ru-RU');
    title.textContent = `–ó–∞–º–µ—Ç–∫–∏ –∑–∞ ${dateStr}`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–º–µ—Ç–∫–∏
    const dayNotes = notesData[selectedDay.dayKey] || [];
    if (dayNotes.length > 0) {
        notesList.innerHTML = dayNotes.map(note => `
            <div class="note-item">
                <div class="note-text">${note.text}</div>
                <div class="note-time">${new Date(note.timestamp).toLocaleString('ru-RU')}</div>
            </div>
        `).join('');
    } else {
        notesList.innerHTML = '<div class="no-notes">–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è</div>';
    }
    
    modal.style.display = 'flex';
}

function closeNotesModal() {
    document.getElementById('notes-modal').style.display = 'none';
}

function showAddNoteForm() {
    closeNotesModal();
    const modal = document.getElementById('add-note-modal');
    const title = document.getElementById('add-note-title');
    
    const dateStr = selectedDay.date.toLocaleDateString('ru-RU');
    title.textContent = `–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –Ω–∞ ${dateStr}`;
    
    document.getElementById('note-text').value = '';
    modal.style.display = 'flex';
}

function closeAddNoteModal() {
    document.getElementById('add-note-modal').style.display = 'none';
}

function showAuthModal() {
    document.getElementById('auth-modal').style.display = 'flex';
    document.getElementById('password-input').value = '';
    document.getElementById('user-type').value = 'tanya';
}

function closeAuthModal() {
    document.getElementById('auth-modal').style.display = 'none';
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º
async function handleAuth(e) {
    e.preventDefault();
    const password = document.getElementById('password-input').value;
    const userType = document.getElementById('user-type').value;
    
    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    const encoder = new TextEncoder();
    const data = encoder.encode(password);
    const hashBuffer = await crypto.subtle.digest('SHA-256', data);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
    
    if (userType === 'tanya' && hashHex === TANYA_PASSWORD_HASH) {
        userRole = 'tanya';
        enterEditMode();
        closeAuthModal();
    } else if (userType === 'dima' && hashHex === DIMA_PASSWORD_HASH) {
        userRole = 'dima';
        enterEditMode();
        closeAuthModal();
    } else {
        alert('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
    }
}

async function handleAddNote(e) {
    e.preventDefault();
    const noteText = document.getElementById('note-text').value.trim();
    
    if (!noteText) return;
    
    const note = {
        text: noteText,
        timestamp: new Date().toISOString(),
        date: selectedDay.dayKey
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    if (!notesData[selectedDay.dayKey]) notesData[selectedDay.dayKey] = [];
    notesData[selectedDay.dayKey].push(note);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
    if (db) {
        try {
            await db.collection('notes').add(note);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:', error);
        }
    }
    
    closeAddNoteModal();
    showNotesModal();
    renderCalendar(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–º–µ—Ç–æ–∫
}

async function saveWorkTime() {
    const workTimeStart = document.getElementById('work-time-start').value;
    const workTimeEnd = document.getElementById('work-time-end').value;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –¢–û–õ–¨–ö–û –≤—Ä–µ–º—è, –Ω–µ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
    scheduleData[selectedDay.dayKey] = {
        ...scheduleData[selectedDay.dayKey],
        timeStart: workTimeStart,
        timeEnd: workTimeEnd
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
    if (db) {
        try {
            await db.collection('schedule').doc(selectedDay.dayKey).set({
                ...scheduleData[selectedDay.dayKey],
                timeStart: workTimeStart,
                timeEnd: workTimeEnd,
                date: selectedDay.dayKey
            }, { merge: true });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏:', error);
        }
    }
    
    closeTimeModal();
    renderCalendar();
    updateStats();
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function enterEditMode() {
    isEditMode = true;
    document.body.classList.add('edit-mode', `role-${userRole}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    const notice = document.getElementById('edit-notice');
    if (userRole === 'tanya') {
        notice.innerHTML = `<strong>üîß –†–µ–∂–∏–º –¢–∞–Ω–∏ –∞–∫—Ç–∏–≤–µ–Ω</strong>
            <p>–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –¥–Ω–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —Ä–∞–±–æ—á–∏—Ö/–≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π</p>
            <button id="save-changes" class="btn btn-secondary" style="margin-top: 10px;">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</button>`;
    } else if (userRole === 'dima') {
        notice.innerHTML = `<strong>üîß –†–µ–∂–∏–º –î–∏–º—ã –∞–∫—Ç–∏–≤–µ–Ω</strong>
            <p>–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –¥–Ω–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã</p>
            <button id="save-changes" class="btn btn-secondary" style="margin-top: 10px;">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</button>`;
    }
    
    document.getElementById('edit-notice').style.display = 'block';
    document.getElementById('edit-toggle').textContent = 'üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ';
    document.getElementById('edit-toggle').classList.remove('btn-primary');
    document.getElementById('edit-toggle').classList.add('btn-secondary');
    
    // –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    document.getElementById('save-changes').addEventListener('click', exitEditMode);
}

function exitEditMode() {
    isEditMode = false;
    userRole = null; // –û—á–∏—â–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    document.body.classList.remove('edit-mode', 'role-tanya', 'role-dima');
    document.getElementById('edit-notice').style.display = 'none';
    document.getElementById('edit-toggle').textContent = '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å';
    document.getElementById('edit-toggle').classList.remove('btn-secondary');
    document.getElementById('edit-toggle').classList.add('btn-primary');
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
function updateStats() {
    const year = currentMonth.getFullYear();
    const month = currentMonth.getMonth();
    const lastDay = new Date(year, month + 1, 0).getDate();
    
    let workDays = 0;
    const today = new Date();
    let nextWorkDay = null;
    
    // –°—á–∏—Ç–∞–µ–º —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ –∏ –Ω–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π
    for (let day = 1; day <= lastDay; day++) {
        const currentDay = new Date(year, month, day);
        const dayKey = currentDay.toISOString().split('T')[0];
        
        if (scheduleData[dayKey]?.isWorkDay) {
            workDays++;
            
            // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
            if (!nextWorkDay && currentDay >= today) {
                nextWorkDay = currentDay;
            }
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    document.getElementById('total-work-days').textContent = workDays;
    
    if (nextWorkDay) {
        document.getElementById('next-workday').textContent = 
            nextWorkDay.toLocaleDateString('ru-RU');
    } else {
        document.getElementById('next-workday').textContent = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    }
// –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ app.js –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –±—ã—Å—Ç—Ä—ã–º–∏ –∑–∞–º–µ—Ç–∫–∞–º–∏
async function loadUpcomingEvents() {
    const eventsList = document.getElementById('upcoming-events');
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    let upcomingEvents = [];
    
    // –ò—â–µ–º —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
    const year = currentMonth.getFullYear();
    const month = currentMonth.getMonth();
    const lastDay = new Date(year, month + 1, 0).getDate();
    
    for (let day = 1; day <= lastDay; day++) {
        const currentDay = new Date(year, month, day);
        if (currentDay < today) continue;
        
        const dayKey = currentDay.toISOString().split('T')[0];
        const schedule = scheduleData[dayKey];
        
        if (schedule?.isWorkDay) {
            upcomingEvents.push({
                date: currentDay,
                title: '–†–∞–±–æ—á–∏–π –¥–µ–Ω—å',
                time: schedule.timeStart && schedule.timeEnd ? 
                      `${schedule.timeStart}-${schedule.timeEnd}` : '–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å'
            });
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Å–æ–±—ã—Ç–∏–π
            if (upcomingEvents.length >= 5) break;
        }
    }
    
    if (upcomingEvents.length > 0) {
        eventsList.innerHTML = upcomingEvents.map(event => `
            <div class="event-item">
                <div class="event-title">${event.title}</div>
                <div class="event-date">
                    <span>${event.date.toLocaleDateString('ru-RU')}</span>
                    <span>${event.time}</span>
                </div>
            </div>
        `).join('');
    } else {
        eventsList.innerHTML = '<div class="no-events">–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π</div>';
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–º–µ—Ç–æ–∫
async function loadQuickNotes() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –±—ã—Å—Ç—Ä—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ localStorage
    const quickNotes = JSON.parse(localStorage.getItem('quickNotes') || '[]');
    const notesList = document.getElementById('quick-notes-list');
    
    if (quickNotes.length > 0) {
        notesList.innerHTML = quickNotes.map((note, index) => `
            <div class="quick-note-item">
                ${note.text}
                <button onclick="deleteQuickNote(${index})" class="btn btn-outline btn-compact" style="margin-top: 5px; padding: 2px 6px; font-size: 0.8em;">‚úï</button>
            </div>
        `).join('');
    } else {
        notesList.innerHTML = '';
    }
}

function addQuickNote() {
    const noteText = document.getElementById('quick-note-text').value.trim();
    if (!noteText) return;
    
    const quickNotes = JSON.parse(localStorage.getItem('quickNotes') || '[]');
    quickNotes.push({
        text: noteText,
        timestamp: new Date().toISOString()
    });
    
    localStorage.setItem('quickNotes', JSON.stringify(quickNotes));
    document.getElementById('quick-note-text').value = '';
    loadQuickNotes();
}

function deleteQuickNote(index) {
    const quickNotes = JSON.parse(localStorage.getItem('quickNotes') || '[]');
    quickNotes.splice(index, 1);
    localStorage.setItem('quickNotes', JSON.stringify(quickNotes));
    loadQuickNotes();
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é initializeApp
async function initializeApp() {
    await loadData();
    setupEventListeners();
    renderCalendar();
    updateStats();
    loadUpcomingEvents();
    loadQuickNotes();
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é setupEventListeners
function setupEventListeners() {
    // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...
    
    // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–º–µ—Ç–∫–∏
    document.getElementById('add-quick-note').addEventListener('click', addQuickNote);
    
    // Enter –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–º–µ—Ç–æ–∫
    document.getElementById('quick-note-text').addEventListener('keypress', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            addQuickNote();
        }
    });
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é renderCalendar —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è
function renderCalendar() {
    // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...
    loadUpcomingEvents(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ –º–µ—Å—è—Ü–∞
}
}
